package de.garden.sensors;

import java.util.Objects;
import java.util.Random;

/**
 * Reading data form sensor SoilMoisture<br><br>
 * 
 * SoilMonsure is the sensor that can read temperature,<br> 
 * sunlight in lux and soil moisture<br><br>
 * 
 * @author grzeg
 *
 */
public class SoilMoisture {
	
//	*******************************************
//	*				  Attributs
//	*******************************************

	/**
	 * Actual temperature in Celcius
	 */
	private double temperature;
	
	/**
	 * Actual sunlight value, useful to check night or day<br>
	 * Possible valuess from 0 to 100
	 */
	private int lux;
	
	/**
	 * Actual soil moisture<br>
	 * Possible values between 0-100
	 */
	private int moisture;

//	*******************************************
//	*				Konstruktors
//	*******************************************
	
	/**
	 * In this class constructor all values are autogenerated.<br>
	 * We can use it in fake read symulation.
	 */
	public SoilMoisture() {
		Random lotto= new Random();
		double rest = lotto.nextDouble();
		rest *= 100;
		rest = Math.round(rest);
		rest /= 100;
		this.temperature = lotto.nextInt(20) + 10 + rest;
		this.lux = lotto.nextInt(100);
		this.moisture = lotto.nextInt(100);
	}
	
	/**
	 * Standard constructor.<br>
	 * In this class construktor we can add values manual <br>
	 * @param temperature
	 * @param lux
	 * @param moisture
	 */
	public SoilMoisture(double temperature, int lux, int moisture) {
		this.temperature = temperature;
		this.lux = lux;
		this.moisture = moisture;
	}
	
//	*******************************************
//	*				 Functions
//	*******************************************
	
	/**
	 * Here we use sunlight 'lux' parametr to know how<br> 
	 * cloudy is sky right now<br><br>
	 * 
	 * We hawe 4 strings outputs possibilitys<br>
	 * '0 - 24'   no sunlight, night<br>
	 * '25 - 49'  cloudy sky, no sunlight, maybe rain come<br>
	 * '50 - 74'  partly clouds and sun<br>
	 * '75 - 100' fullsunlight, day, no clouds<br><br>
	 * 
	 * @return how cloudy is right now
	 */
	public String skyLooks() {
		String retVal = "";
		int skyVal = getLux();
		if (skyVal < 24) {
			retVal = "no sunlight, maybe night";
		}
		else if (skyVal >=25 & skyVal < 49) {
			retVal = "cloudy sky, no sunlight, maybe rain come";
		}
		else if (skyVal >=50 & skyVal < 74) {
			retVal = "partly clouds sky";
		}
		else {
			retVal = "fullsunlight, nice wether, no clouds on the sky";
		}
		return retVal;
	}
	
	/**
	 * Getter for temperature
	 * @return the temperature
	 */
	public double getTemperature() {
		return temperature;
	}

	/**
	 * Setter for temperature
	 * @param temperature is the temperature to set
	 */
	public void setTemperature(double temperature) {
		this.temperature = temperature;
	}

	/**
	 * Getter for sunlights
	 * @return the lux
	 */
	public int getLux() {
		return lux;
	}

	/**
	 * Setter for sunlights
	 * @param lux is the lux to set
	 */
	public void setLux(int lux) {
		this.lux = lux;
	}

	/**
	 * @return the moinsure
	 */
	public int getMoisture() {
		return moisture;
	}

	/**
	 * @param moinsure is the moinsure to set
	 */
	public void setMoisture(int moisture) {
		this.moisture = moisture;
	}

	@Override
	public int hashCode() {
		return Objects.hash(lux, moisture, temperature);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		SoilMoisture other = (SoilMoisture) obj;
		return lux == other.lux && moisture == other.moisture
				&& Double.doubleToLongBits(temperature) == Double.doubleToLongBits(other.temperature);
	}
	
	@Override
	public String toString() {
		return "SoilMoisture [temperature=" + temperature + ", lux=" + lux + ", moisture=" + moisture + "]";
	}
	
}
