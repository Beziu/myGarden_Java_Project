package de.garden.sensors;

import static de.garden.sensors.WetterInformation.*;

import java.util.Objects;
import java.util.Random;

/**
 * Reading data form sensor BME 250.<br><br>
 * 
 * Humidity sensor measuring relative humidity, <br>
 * barometric pressure and ambient temperature.<br><br>
 * 
 * @author grzeg
 *
 */
public class Bme250 {
	
//	*******************************************
//	*				  Attributs
//	*******************************************
	
	/**
	 * Actual temperature in Celcius.
	 */
	protected double temperature;

	/**
	 * Actual humidity value in percent.<br>
	 * Possible values between 0-100
	 */
	protected int humidity;
	
	/**
	 * Actual athmospferic pressure value in hPa.<br>
	 * Normals values schuld be in range between 980-1100.
	 */
	protected int pressure;
	
//	*******************************************
//	*				Konstruktors
//	*******************************************
	
	/**
	 * In this class constructor all values are autogenerated.<br>
	 * We can use it in fake read symulation.
	 */
	public Bme250() {
		Random lotto= new Random();
		double rest = lotto.nextDouble();
		rest *= 100;
		rest = Math.round(rest);
		rest /= 100;
		this.temperature = lotto.nextInt(20) + 10 + rest;
		this.humidity = lotto.nextInt(100);
		this.pressure = lotto.nextInt(30) + 980;
	}
	
	/**	 
	 * Standard constructor.<br>
	 * In this class construktor we can add values manual. <br>
	 * @param temperature
	 * @param humidity
	 * @param pressure
	 */
	public Bme250(double temperature, int humidity, int pressure) {
		this.temperature = temperature;
		this.humidity = humidity;
		this.pressure = pressure;
	}
	
//	*******************************************
//	*				 Functions
//	*******************************************	
	
	/**
	 * Here we use 'humidity' parametr to know how<br> 
	 * humid is in air<br><br>
	 * 
	 * We have 3 strings outputs possibilitys<br>
	 * '0 - 29'  air is to dry<br>
	 * '30 - 74'  Is is regular<br>
	 * '75 - 100' a lot water in air<br><br>
	 * 
	 * @return how dry air is right now
	 */
	public String wetter() {
		if (humidity < 30) {
			return AIR.getText();
		}
		else if (humidity >=30 & humidity < 75) {
			return HUMID.getText();
		}
		else {
			return RAIN.getText();
		}
	}
	
	
	/**
	 * Getter for temperature
	 * @return the temperature
	 */
	public double getTemperature() {
		return temperature;
	}

	/**
	 * Setter for temperature
	 * @param temperature the temperature to set
	 */
	public void setTemperature(double temperature) {
		this.temperature = temperature;
	}

	/**
	 * Getter for humidity
	 * @return the humidity
	 */
	public int getHumidity() {
		return humidity;
	}

	/**
	 * Setter for humidity
	 * @param humidity the humidity to set
	 */
	public void setHumidity(int humidity) {
		this.humidity = humidity;
	}

	/**
	 * Getter for pressure
	 * @return the pressure
	 */
	public int getPressure() {
		return pressure;
	}

	/**
	 * Setter for pressure
	 * @param pressure the pressure to set
	 */
	public void setPressure(int pressure) {
		this.pressure = pressure;
	}

	@Override
	public int hashCode() {
		return Objects.hash(humidity, pressure, temperature);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Bme250 other = (Bme250) obj;
		return humidity == other.humidity && pressure == other.pressure
				&& Double.doubleToLongBits(temperature) == Double.doubleToLongBits(other.temperature);
	}

	@Override
	public String toString() {
		return "Bme250 [temperature=" + temperature + ", humidity=" + humidity + ", pressure=" + pressure + "]";
	}

}
